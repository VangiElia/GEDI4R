"\\1-\\2-\\3", "2019-05-02"))
as.Date(gsub(".*(\\d{4})\\.(\\d{2})\\.(\\d{2}).*",
"\\1-\\2-\\3", "2019-05-02-06-35-11"))
tools::file_path_as_absolute("E:/test_rGEDI4/convert.shp")
tools::file_path_sans_ext("E:/test_rGEDI4/convert.shp")
devtools::load_all(".")
#built source
devtools::build("E:/rGEDI4","E:/GEDI",vignettes = T)
devtools::load_all(".")
#built source
devtools::build("E:/rGEDI4","E:/GEDI",vignettes = T)
devtools::load_all(".")
#built source
devtools::build("E:/rGEDI4","E:/GEDI",vignettes = T)
devtools::load_all(".")
.Last.error.trace
#built source
devtools::build("E:/rGEDI4","E:/GEDI",vignettes = T)
}
devtools::load_all(".")
l4_clip()
l4_clip(NULL)
l4_clip <- function (gediL4,clip,usebound=NULL,tct=NULL) {
l4_clip <- function (gediL4,clip,usebound=NULL,tct=NULL) {
if(is.null(gediL4))return(NULL)
#input check
stopifnot(
"clip is missing with no default"= !missing(clip),
"usebound must be logical or NULL"= any(is.logical(usebound),is.null(usebound))
)
if(!is.null(tct)){
stopifnot("tct must be of lenght 1"=length(tct)==1,
"tct must be numeric"=is.numeric(tct))
gediL4 <- gediL4[gediL4$tree_cover>tct,]
}
if(is.null(usebound)||usebound==F){
if(any(class(clip) == "character")) {
if (!file.exists(clip))
stop("clip doesn't exist")
message("Path detected")
if (tools::file_ext(clip) == "shp") {
message("Shp detected")
x <- raster::shapefile(clip)
} else if (tools::file_ext(clip) == "tif") {
message("Tif detected")
x <- raster::raster(clip)
}
#bounding box
tmp <- t(raster::bbox(x))
proj4string <- as.character(x@proj4string)
# Transformed data in lat lon
pj <- proj4::project(tmp, proj4string, inverse = TRUE)
bbox <- c(t(pj))
} else if (any(class(clip) %in% c("sf", "data.frame"))) {
message("Sf object detected")
bbox <- sf::st_bbox(clip, crs = st_crs(4326))
} else if (class(clip) %in% c("RasterLayer", "RasterStack", "raster")) {
b <- t(raster::bbox(clip))
proj4string <- as.character(r@crs)
pj <- proj4::project(b, proj4string, inverse = TRUE)
bbox <- c(t(pj))
} else if (class(clip) %in% c("bbox", "numeric")) {
message("Vector detected")
bbox <- clip
}
xmin <-  bbox[1]
ymin <- bbox[2]
xmax <- bbox[3]
ymax <- bbox[4]
mask = gediL4$lon_lowestmode >= xmin & gediL4$lon_lowestmode <=
xmax & gediL4$lat_lowestmode >= ymin & gediL4$lat_lowestmode <=
ymax & gediL4$lon_lowestmode >= xmin & gediL4$lon_lowestmode <=
xmax & gediL4$lat_lowestmode >= ymin & gediL4$lat_lowestmode <=
ymax
mask[!stats::complete.cases(mask)] = FALSE
mask = (1:length(gediL4$lat_lowestmode))[mask]
newFile <- gediL4[mask, ]
}else {
if(any(class(clip)=="character")){
if(tools::file_ext(clip)=="tif"){
stop("cannot use raster as boundary to clip points when usebound=T")
}else {
bound <- sf::read_sf(clip)
bound <- sf::st_transform(bound, 4326)
sf_ob <- sf::st_as_sf(gediL4,coords=c("lon_lowestmode","lat_lowestmode"))
sf::st_crs(sf_ob) <- 4326
clipped <- sf::st_intersection(sf_ob,bound)
newFile <- clipped
}
} else if(any(class(clip)%in%c("sf","data.frame"))){
bound <- sf::st_transform(bound, 4326)
sf_ob <- sf::st_as_sf(gediL4,coords=c("lon_lowestmode","lat_lowestmode"))
sf::st_crs(sf_ob) <- 4326
clipped <- sf::st_intersection(sf_ob,bound)
newFile <- clipped
} else if(class(clip)%in%c("bbox","numeric")){
stop("cannot use numeric vector to clip points when usebound=T")
}
}
return(newFile)
}
devtools::load_all(".")
#built source
devtools::build("E:/rGEDI4","E:/GEDI",vignettes = T)
data("gedil4")
l4_plotagb(gedil4)
devtools::load_all(".")
#built source
devtools::build("E:/rGEDI4","E:/GEDI",vignettes = T)
devtools::load_all(".")
#built source
devtools::build("E:/rGEDI4","E:/GEDI",vignettes = T)
#built source
devtools::build("E:/rGEDI4","E:/GEDI",vignettes = T)
devtools::load_all(".")
#built source
devtools::build("E:/rGEDI4","E:/GEDI",vignettes = T)
devtools::load_all(".")
#built source
devtools::build("E:/rGEDI4","E:/GEDI",vignettes = T)
devtools::load_all(".")
#built source
devtools::build("E:/rGEDI4","E:/GEDI",vignettes = T)
devtools::load_all(".")
}
devtools::load_all(".")
}
l4_clip <- function (gediL4,clip,usebound=NULL,tct=NULL) {
l4_clip <- function (gediL4,clip,usebound=NULL,tct=NULL) {
}
l4_clip <- function (gediL4,clip,usebound=NULL,tct=NULL) {
#bulit binary
devtools::build("E:/rGEDI4","E:/GEDI",binary = T,vignettes = T)
#built source
devtools::build("E:/rGEDI4","E:/GEDI",vignettes = T)
#built source
devtools::build("E:/rGEDI4","E:/GEDI",vignettes = T)
#built source
devtools::build("E:/rGEDI4","E:/GEDI",vignettes = T)
devtools::load_all(".")
outdir <-  "E:/GEDI/shp_date"
file <- list.files("E:/GEDI/gedi_4/",full.names = T,pattern = "01.h5")
#boundary of Italy
bound <- system.file("extdata","Italy.shp",package="rGEDI4")
#process all file in chunk of 20 file in parallel and filter footprints with a
#tree cover threshold less than 10%
shp <-
l4_process(
file,
nfile = 30,
clip = bound,
usegeometry = TRUE,
epsg = 32632,
prefix = "chunk",
outdir = outdir,
parallel = F,
ncore=30,
tct=10
)
#built source
devtools::build("E:/rGEDI4","E:/GEDI",vignettes = T)
install.packages("E:/GEDI/rGEDI4_0.0.0.9000.tar.gz",repos = NULL,type = "source")
install.packages("E:/GEDI/rGEDI4_0.0.0.9000.tar.gz",repos = NULL,type = "source")
library(sf)
setwd("E:/GEDI/")
shp <- list.files("shp_date/",pattern = "shp",full.names =T)
tagliate <- read_sf("tagliate/tagliate_32632.shp")
ex <- read_sf(shp[1])
poly <- tagliate[tagliate$label==1985,]
system.time(prova <- sf::aggregate(ex,poly,FUN=mean))
system.time(prova <- aggregate(ex,poly,FUN=mean))
warnings()
system.time(prova <- aggregate(ex,poly,ids="agbd",FUN=mean))
warnings()
prova
#built source
devtools::build("E:/rGEDI4","E:/GEDI",vignettes = T)
#built source
devtools::build("E:/rGEDI4","E:/GEDI",vignettes = T)
#built source
devtools::build("E:/rGEDI4","E:/GEDI",vignettes = T)
install.packages("E:/GEDI/rGEDI4_0.0.0.9000.tar.gz",repos = NULL,type = "source")
devtools::load_all(".")
#built source
devtools::build("E:/GEDI4R","E:/GEDI",vignettes = T)
#built source
devtools::build("E:/GEDI4R","E:/GEDI",vignettes = T)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
#built source
devtools::build("E:/GEDI4R","E:/GEDI",vignettes = T)
install.packages("E:/GEDI/GEDI4R_0.0.0.9000.tar.gz",repos = NULL,type = "source")
install.packages("E:/GEDI/GEDI4R_0.0.0.9000.tar.gz",repos = NULL,type = "source")
x <- readRDS("E:/GEDI/agbd_in_tagliare.rds")
x <- do.call(rbind,x)
library(sf)
write_sf(x,"E:/GEDI/gedi_disturbi.shp")
warnings()
setwd("E:/AVT_iperspettrale/")
library(terra)
img <- rast("img.tif")
img
img <- rast("2021-10-20_09-58-31_8N-rect_subset.dat")
img
wl <- names(img)
wl <- data.frame(band=1:length(names(img)),wl=as.numeric(names(img)))
View(wl)
write.table(wl,"wl.txt")
hist(img[[1]])
hist(img[[2]])
hist(img[[3]])
img
1359* 212
img[1]
ex <- img[sample(1:nrow(img)*ncol(img))]
ex <- img[sample(1:nrow(img)*ncol(img),1)]
View(ex)
ex <- t(img[sample(1:nrow(img)*ncol(img),1)])
View(ex)
library(ggplot2)
ggplot(ex,aes(rownames(ex),V1))
ex <- as.data.frame(t(img[sample(1:nrow(img)*ncol(img),1)]))
View(ex)
ggplot(ex,aes(rownames(ex),V1))
ggplot(ex,aes(rownames(ex),V1))+
geom_line()+
theme(axis.text.x = element_text(angle = 90))
ggplot(ex,aes(rownames(ex),V1,group=V1))+
geom_line()+
theme(axis.text.x = element_text(angle = 90))
ex$wl <- rownames(ex)
View(ex)
ex$wl <- as.numeric(rownames(ex))
View(ex)
ggplot(ex,aes(rownames(ex),V1,group=V1))+
geom_line()+
theme(axis.text.x = element_text(angle = 90))
ggplot(ex,aes(wl,V1,group=V1))+
geom_line()+
theme(axis.text.x = element_text(angle = 90))
ggplot(ex,aes(wl,V1,group=wl))+
geom_line()+
theme(axis.text.x = element_text(angle = 90))
ggplot(ex,aes(wl,V1))+
geom_line()+
theme(axis.text.x = element_text(angle = 90))
ggplot(ex,aes(wl,V1))+
geom_line()+
theme_minimal(base_family = "serif")
theme(axis.text.x = element_text(angle = 90))+
labs(x="Wavelength",y="Reflectance")
ggplot(ex,aes(wl,V1))+
geom_line()+
theme_minimal(base_family = "serif")+
theme(axis.text.x = element_text(angle = 90))+
labs(x="Wavelength",y="Reflectance")
View(ex)
ex <- as.data.frame(t(img[sample(1:nrow(img)*ncol(img),10)]))
View(ex)
View(ex)
ex$wl <- as.numeric(rownames(ex))
m <- reshape2::melt(ex)
View(m)
m <- reshape2::melt(ex,id.vars="wl")
View(wl)
View(ex)
View(m)
View(m)
ggplot(m,aes(wl,value))+
geom_line()+
theme_minimal(base_family = "serif")+
theme(axis.text.x = element_text(angle = 90))+
labs(x="Wavelength",y="Reflectance")
ggplot(m,aes(wl,value,col=variable))+
geom_line()+
theme_minimal(base_family = "serif")+
theme(axis.text.x = element_text(angle = 90))+
labs(x="Wavelength",y="Reflectance")
ex <- as.data.frame(t(img[sample(1:nrow(img)*ncol(img),100)]))
ex$wl <- as.numeric(rownames(ex))
m <- reshape2::melt(ex,id.vars="wl")
ggplot(m,aes(wl,value,col=variable))+
geom_line()+
theme_minimal(base_family = "serif")+
theme(axis.text.x = element_text(angle = 90))+
labs(x="Wavelength",y="Reflectance")
ex <- as.data.frame(t(img[sample(1:nrow(img)*ncol(img),3)]))
ex$wl <- as.numeric(rownames(ex))
m <- reshape2::melt(ex,id.vars="wl")
ggplot(m,aes(wl,value,col=variable))+
geom_line()+
theme_minimal(base_family = "serif")+
theme(axis.text.x = element_text(angle = 90))+
labs(x="Wavelength",y="Reflectance")
plot(img[[15]])
plotRGB(img,r=38,g=25,b=15)
max(img)
plotRGB(img,r=38,g=25,b=15,scale=16572 )
plotRGB(img,r=38,g=25,b=15,scale=16572,stretch="lin" )
plotRGB(img,r=38,g=25,b=15,scale=16572,stretch="hist" )
plotRGB(img,r=38,g=25,b=15,scale=10000)
plotRGB(img,r=38,g=25,b=15,scale=16572,smooth=T)
npixel <- 3
ex <- as.data.frame(t(img[sample(1:nrow(img)*ncol(img),npixel)]))
ex$wl <- as.numeric(rownames(ex))
m <- reshape2::melt(ex,id.vars="wl")
ggplot(m,aes(wl,value,col=variable))+
geom_line()+
theme_minimal(base_family = "serif")+
theme(axis.text.x = element_text(angle = 90))+
labs(x="Wavelength",y="Reflectance")
set.seed(4)
npixel <- 3
ex <- as.data.frame(t(img[sample(1:nrow(img)*ncol(img),npixel)]))
ex$wl <- as.numeric(rownames(ex))
m <- reshape2::melt(ex,id.vars="wl")
ggplot(m,aes(wl,value,col=variable))+
geom_line()+
theme_minimal(base_family = "serif")+
theme(axis.text.x = element_text(angle = 90))+
labs(x="Wavelength",y="Reflectance")
as.matrix(img)
prova <- as.matrix(img)
fit <- kmeans(prova,centers = 3)
fit
fit
tmp <- img[[1]]
fit$centers
fit$cluster
values(tmp) <- fit$cluster
plot(tmp)
fit <- kmeans(prova,centers = 5)
tmp <- img[[1]]
values(tmp) <- fit$cluster
plot(tmp)
library(randomForest)
#randomforest
rf_fit <- randomForest(prova)
setwd("E:/biomassa_agridigit/")
library(terra)
jrc <- rast("biomassa_2010_jrc.tif")
jrc
mask <- rast("NFM.tif")
mask
ev <- rast("biomassa_2005_ev.tif")
ev
jrc
ev
mask
input <- list.files(pattern = "2010",full.names = T)
paste0(basename(tools::file_path_sans_ext(input)),"_allign.tif")
output <- paste0(basename(tools::file_path_sans_ext(input)),"_allign.tif")
base <- raster(base)
library(raster)
base <- raster(base)
est <- extent(est)
input <- list.files(pattern = "2010",full.names = T)
base <- "E:/biomassa_agridigit/NFM.tif"
output <- paste0(basename(tools::file_path_sans_ext(input)),"_allign.tif")
base <- raster(base)
est <- extent(est)
est <- extent(base)
est
est <- c(est@xmin, est@ymin, est@xmax, est@ymax)
#allign
myallign <- function(input,output,res=c(23, 23),estensione){
mask_out <- gdalwarp(
srcfile = input,
dstfile = output,
t_srs=proj4string(base),
tr = res,
te = estensione,
output_Raster = T,
co = "compress=DEFLATE",
overwrite = TRUE,
verbose = TRUE
)
}
proj4string(base)
#allign
myallign <- function(input,output,res=c(23, 23),estensione){
mask_out <- gdalwarp(
srcfile = input,
dstfile = output,
t_srs=proj4string(base),
tr = res,
te = estensione,
output_Raster = T,
co = "compress=DEFLATE",
overwrite = TRUE,
verbose = TRUE
)
}
input <- list.files(pattern = "2010",full.names = T)
input
base <- "E:/biomassa_agridigit/NFM.tif"
output <- paste0(basename(tools::file_path_sans_ext(input)),"_allign.tif")
output
output <- paste0(tools::file_path_sans_ext(input),"_allign.tif")
output
base <- raster(base)
base
est <- c(est@xmin, est@ymin, est@xmax, est@ymax)
#allign
myallign <- function(input,output,res=c(23, 23),estensione){
mask_out <- gdalwarp(
srcfile = input,
dstfile = output,
t_srs=proj4string(base),
tr = res,
te = estensione,
output_Raster = T,
co = "compress=DEFLATE",
overwrite = TRUE,
verbose = TRUE
)
}
#allign
myallign <- function(input,res=c(23, 23),estensione){
output <- paste0(tools::file_path_sans_ext(input),"_allign.tif")
mask_out <- gdalwarp(
srcfile = input,
dstfile = output,
t_srs=proj4string(base),
tr = res,
te = estensione,
output_Raster = T,
co = "compress=DEFLATE",
overwrite = TRUE,
verbose = TRUE
)
}
#allign
myallign <- function(input,res=c(23, 23),estensione){
output <- paste0(tools::file_path_sans_ext(input),"_allign.tif")
mask_out <- gdalwarp(
srcfile = input,
dstfile = output,
t_srs=proj4string(base),
tr = res,
te = estensione,
output_Raster = T,
co = "compress=DEFLATE",
overwrite = TRUE,
verbose = TRUE
)
}
l <- lapply(input,myallign,estensione=est)
library(gdalUtils)
l <- lapply(input,myallign,estensione=est)
l
l <- list.files(pattern = "allign",full.names = T)
l
l <- list.files(pattern = "allign",full.names = T)
l
map <- rast(l)
map
l
l
names(l) <- c("geolab","esa","jrc")
map
l
names(map) <- c("geolab","esa","jrc")
map
map_masked <- terra::mask(map,mask,filename="biomass_stack.tif")
map_masked
library(exactextractr)
regioni <- sf::read_sf("E:/Elia_backup/dati/Limiti_2016_WGS84_Italia/Limiti01012005/Reg01012005/Reg01012005_WGS84.shp")
map_masked <- stack(map_masked)
map_masked
regioni
colnames(regioni)
ex <- exact_extract(map_masked,regioni,fun=c("sum","mean"),append_cols="DEN_REG")
regioni <- sf::read_sf("E:/Elia_backup/dati/Limiti_2016_WGS84_Italia/Limiti01012016/Reg2016_WGS84_g/Confini_Regionali_min_ambiente.shp")
regioni
ex <- exact_extract(map_masked,regioni,fun=c("sum","mean"),append_cols="regione")
ex <- exact_extract(map_masked[[1]],regioni,fun=c("sum","mean"),append_cols="regione")
ex <- exact_extract(map_masked[[1]],regioni,fun=sum,append_cols="regione")
ex <- exact_extract(map_masked[[1]],regioni,fun="sum",append_cols="regione")
ex <- exact_extract(map_masked[[1]],regioni,"mean",append_cols="regione")
ex <- exact_extract(map_masked[[2]],regioni,"mean",append_cols="regione")
ex <- exact_extract(map_masked[[3]],regioni,"mean",append_cols="regione")
ex <- exact_extract(map_masked[[3]],regioni,"mean",append_cols="regione")
ex <- exact_extract(map_masked[[3]],regioni,mean,append_cols="regione")
ex <- exact_extract(map_masked, regioni, c('min', 'max'))
regioni <- sf::read_sf("E:/Elia_backup/dati/Limiti_2016_WGS84_Italia/Limiti01012021/Reg01012021/Reg01012021_WGS84.shp")
ex <- exact_extract(map_masked, regioni, c('sum', 'mean'))
ex <- exact_extract(map_masked, regioni, c('sum', 'mean'))
map_masked
regioni
ex <- exact_extract(map_masked, regioni, fun=c('sum', 'mean'))
map_masked
regioni
ex <- exact_extract(map_masked[[1]], regioni, fun=c('sum', 'mean'))
map_masked[[1]]
ex <- exact_extract(map_masked[[1]], regioni, fun=c('sum'))
map_masked
map_masked[[4]]==-Inf
map_masked[[3]]==-Inf
ev <- raster("biomassa_2005_ev.tif")
tmp <- raster("./biomassa_2005_ev_allign")
tmp <- raster("~/biomassa_2005_ev_allign")
tmp <- raster("E:/biomassa_agridigit/biomassa_2005_ev_allign")
tmp <- raster("E:/biomassa_agridigit/biomassa_2005_ev_allign.tif")
ex <- exact_extract(tmp, regioni, fun=c('sum'))
ex <- exact_extract(tmp, regioni, fun=c('sum'))
ex <- exact_extract(tmp, regioni,'sum')
mask <- raster("NFM.tif")
ex <- exact_extract(mask, regioni,'sum')
file.exists("~/.ssh/id_rsa.pub")
