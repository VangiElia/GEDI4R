% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/l4_convert.R
\name{l4_convert}
\alias{l4_convert}
\title{Convert GEDI level 4A data to \code{sf} object and export it}
\usage{
l4_convert(
  gediL4,
  epsg = NULL,
  filename,
  driver = "ESRI Shapefile",
  return_path = F,
  ...
)
}
\arguments{
\item{gediL4}{\code{data.table} obtained with the function \code{l4_get},
\code{l4_getmulti(...,merge=TRUE)} or \code{l4_clip}, or an \code{sf} object.}

\item{epsg}{Numeric: destination EPSG code. Deafult to NULL.}

\item{filename}{Character: path to data source name. Usually a file name with
extension. See \code{?st_write} for more details.}

\item{driver}{Character: name of driver to be used. If missing a driver name
is guessed from filename. See \code{?st_write} for more details. Default to
ESRI Shapefile}

\item{return_path}{Logical: if TRUE, the path of the saved file will be
returned, otherwise the function will return NULL. Default to FALSE.}

\item{...}{Others argument to pass to \code{sf_write}, such as \code{append}}
}
\value{
The function is called for its side effects. It return \code{NULL}
unless \code{return_path=TRUE}.
}
\description{
Write GEDI level 4A data to disk, by default as a Shapefile
}
\details{
The default drive for saving file is ESRI Shapefile, so if the
output name is missing the file extention, a .shp will be created. If a
file extension will cause conflict with the default driver, the extension
will be guessed from the file name. Note that in converting data to
Shapefile columns names will be abreviated with a warning
}
\examples{

#Specifying the path to GEDI level4A data (zip file)
outdir = tempdir()
l4_zip <- system.file("extdata",
                      "GEDI04_A_2020186052327_O08834_T03611_02_001_01.zip",
                      package = "GEDI4R")
#Unzipping GEDI level4A data
l4 <- unzip(l4_zip,exdir = outdir)
#get GEDI level4A data
l4_data <- l4_get(l4,tct=50)
#convert to shp file
converted <- l4_convert(l4_data,epsg = 32632,filename=paste0(outdir,"/example.shp"))
list.files(outdir,pattern = "example",full.names = T)
file.remove(list.files(outdir,pattern = "example",full.names = T))
}
\seealso{
\code{\link[sf]{sf_write}}
}
